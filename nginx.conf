worker_processes 1;

events {
    worker_connections 30;
}

http {
    # Define upstream for Django server
    upstream django_server {

        server localhost:8000;  # Use Docker Compose service name
   
    }

    # Disable caching for live MJPEG streams
    proxy_cache off;



    # HTTPS server
    server {

        listen 443 ssl;
        server_name localhost;
        
        ssl_certificate /etc/nginx/ssl/nginx.crt;
        ssl_certificate_key /etc/nginx/ssl/nginx.key;
        

        
        # Proxy requests to Django
        location / {
 
            proxy_pass http://django_server;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;

            # Optional: Enable caching
            # proxy_cache my_cache;
            # proxy_cache_valid 200 302 10m;
            # proxy_cache_valid 404 1m;
            # proxy_cache_use_stale error timeout updating;
        }



        # Handle MJPEG streaming URLs
        location /stream/ {
            proxy_pass http://django_server;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Optimize for MJPEG streaming
            proxy_buffering off; # Critical for real-time frame delivery
            proxy_buffer_size 4k; # Small buffer for headers
            proxy_read_timeout 600s;
            proxy_connect_timeout 30s;
            chunked_transfer_encoding off; # Avoid chunking for MJPEG
            }


    }

    # Optional: Define a cache zone
    # proxy_cache_path /tmp/nginx_cache levels=1:2 keys_zone=my_cache:10m max_size=1g inactive=60m use_temp_path=off;
    # Redirect HTTP to HTTPS
    
    server {
        listen 80;
        server_name localhost;
        # Redirect all other HTTP requests to HTTPS
        location / {
            return 301 https://$host$request_uri;
        }
    }
}

